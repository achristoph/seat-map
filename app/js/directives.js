// Generated by CoffeeScript 1.6.3
(function() {
  var canvasHeight, canvasWidth, cellSize, drawGridLine, initSeats;

  cellSize = 25;

  canvasWidth = 375;

  canvasHeight = 375;

  initSeats = function(tables) {
    var k, s, v, _results;
    _results = [];
    for (k in tables) {
      v = tables[k];
      s = tables[k];
      _results.push(s.style = {
        position: 'absolute',
        top: "" + (s.row * cellSize) + "px",
        left: "" + (s.column * cellSize) + "px",
        width: "" + (s.width * cellSize) + "px",
        height: "" + (s.height * cellSize) + "px",
        "line-height": "" + (s.height * cellSize) + "px"
      });
    }
    return _results;
  };

  directives.directive("searchPlace", function(Tables) {
    return {
      restrict: "A",
      link: function(scope, el, attrs) {
        var autocomplete, options;
        el.popover({
          trigger: 'manual'
        });
        options = {
          types: ['establishment']
        };
        autocomplete = new google.maps.places.Autocomplete(el[0], options);
        navigator.geolocation.getCurrentPosition(function(position) {
          var bounds, loc;
          loc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          bounds = new google.maps.LatLngBounds(loc, loc);
          return autocomplete.setBounds(bounds);
        });
        google.maps.event.trigger(autocomplete, 'place_changed');
        google.maps.event.addListener(autocomplete, 'place_changed', function() {
          var place;
          place = autocomplete.getPlace();
          scope.savePlace(place);
          if (place.geometry) {
            scope.$apply(function() {
              scope.place = place;
              return scope.getTables(place);
            });
            return el.popover('hide');
          } else {
            return el.popover('show');
          }
        });
        $(document).click(function() {
          return el.popover('hide');
        });
        return $('#loc-me-btn').click(function() {
          if (!$('#loc-me-btn').hasClass('active')) {
            return navigator.geolocation.getCurrentPosition(function(position) {
              var bounds, loc;
              loc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
              bounds = new google.maps.LatLngBounds(loc, loc);
              return autocomplete.setBounds(bounds);
            }, function() {
              return alert('error');
            });
          } else {
            return autocomplete.setBounds(null);
          }
        });
      }
    };
  });

  directives.directive("cellPanel", function() {
    return {
      restrict: "E",
      link: function(scope, el, attrs) {
        var name;
        name = $(".selectedCell").attr("name");
        $("#square").change(function() {
          return $(".selectedCell").removeClass("circle");
        });
        $("#circle").change(function() {
          return $(".selectedCell").addClass("circle");
        });
        $("#openCellPanel").click(function() {
          $("#openCellPanel").hide("slide");
          return $("#cellPanel").toggle("slide");
        });
        return $("#cellPanelCloseBtn").click(function() {
          $("#cellPanel").toggle("slide");
          return $("#openCellPanel").show("slide");
        });
      }
    };
  });

  directives.directive("zoom", function(Tables) {
    return {
      restrict: "A",
      link: function(scope, el, attrs) {
        return el.click(function(e) {
          var context, grid;
          if (attrs.zoom === 'in') {
            $("#zoom-in").attr("disabled", false);
            $("#zoom-out").attr("disabled", false);
            cellSize = cellSize + 5;
          } else if (attrs.zoom === 'out') {
            $("#zoom-out").attr("disabled", false);
            $("#zoom-in").attr("disabled", false);
            cellSize = cellSize - 5;
          }
          if (cellSize >= 30) {
            $("#zoom-in").attr("disabled", true);
          } else if (cellSize <= 10) {
            $("#zoom-out").attr("disabled", true);
          }
          grid = document.getElementById('grid');
          grid.width = grid.width;
          context = grid.getContext("2d");
          drawGridLine(context);
          initSeats(Tables.data);
          scope.$apply();
          $("cell").each(function() {
            return $(this).draggable("option", "grid", [cellSize, cellSize]);
          });
          return $("cell").each(function() {
            return $(this).resizable("option", "grid", [cellSize, cellSize]);
          });
        });
      }
    };
  });

  directives.directive("cell", function($compile, Tables) {
    return {
      restrict: "E",
      template: "<div ng-bind='table.qty'></div>",
      scope: true,
      link: function(scope, el, attrs) {
        el.draggable({
          stop: function() {
            var column, row, t, x, y;
            x = el.context.offsetLeft;
            y = el.context.offsetTop;
            column = Math.round(x / cellSize);
            row = Math.round(y / cellSize);
            t = scope.saveTablePosition(attrs.name, row, column);
            t.style = {
              position: 'absolute',
              top: "" + (t.row * cellSize) + "px",
              left: "" + (t.column * cellSize) + "px",
              width: "" + (t.width * cellSize) + "px",
              height: "" + (t.height * cellSize) + "px",
              "line-height": "" + (t.height * cellSize) + "px"
            };
            t["class"] = "" + t["class"] + " selected-cell";
            return scope.$apply();
          },
          grid: [cellSize, cellSize],
          containment: "#grid"
        });
        el.resizable({
          grid: [cellSize, cellSize],
          autoHide: true,
          containment: "#grid",
          stop: function() {
            var h, w;
            w = Math.round(el.width() / cellSize);
            h = Math.round(el.height() / cellSize);
            return scope.saveTableSize(attrs.name, w, h);
          },
          resize: function() {
            var h, w;
            w = Math.round(el.width() / cellSize);
            h = Math.round(el.height() / cellSize);
            el.css("line-height", "" + (el.height()) + "px");
            el.width((w * cellSize) - 2);
            return el.height((h * cellSize) - 2);
          }
        });
        return el.mousedown(function(e) {
          var h, w, x, y;
          if (e.which === 1) {
            x = e.currentTarget.offsetLeft;
            y = e.currentTarget.offsetTop;
            w = e.currentTarget.clientWidth;
            h = e.currentTarget.clientHeight;
            $(".selected-cell").removeClass("selected-cell");
            el.toggleClass("selected-cell");
            if (el.hasClass("circle")) {
              return $("#circle-btn").button('toggle');
            } else {
              return $("#square-btn").button('toggle');
            }
          }
        });
      }
    };
  });

  directives.directive("grid", function($compile, Tables) {
    return {
      restrict: "A",
      link: function(scope, el, attrs) {
        var context,
          _this = this;
        context = el.get(0).getContext("2d");
        drawGridLine(context);
        $("#frame").on("contextmenu", function(e) {
          return false;
        });
        initSeats(Tables.data);
        return el.mousedown(function(e) {
          var column, row, table, x, y;
          if (e.which === 1) {
            x = e.pageX - $("#frame")[0].offsetLeft;
            y = e.pageY - $("#frame")[0].offsetTop;
            column = Math.floor(x / cellSize);
            row = Math.floor(y / cellSize);
            table = {
              name: row + '-' + column,
              qty: 0,
              row: row,
              column: column,
              width: 1,
              height: 1
            };
            table.style = {
              position: 'absolute',
              top: "" + (table.row * cellSize) + "px",
              left: "" + (table.column * cellSize) + "px",
              width: "" + (table.width * cellSize) + "px",
              height: "" + (table.height * cellSize) + "px"
            };
            if ($("#circle-btn").hasClass('active')) {
              table["class"] = "circle";
            } else {
              table["class"] = "square";
            }
            scope.addTable(table);
            return scope.$apply();
          }
        });
      }
    };
  });

  drawGridLine = function(context) {
    var x, y, _i, _j;
    for (x = _i = 0; cellSize > 0 ? _i <= canvasWidth : _i >= canvasWidth; x = _i += cellSize) {
      context.moveTo(0.5 + x, 0);
      context.lineTo(0.5 + x, canvasHeight);
    }
    context.moveTo(canvasWidth, 0);
    context.lineTo(canvasWidth, canvasHeight);
    for (y = _j = 0; cellSize > 0 ? _j <= canvasHeight : _j >= canvasHeight; y = _j += cellSize) {
      context.moveTo(0, 0.5 + y);
      context.lineTo(canvasWidth, 0.5 + y);
    }
    context.moveTo(0, canvasHeight);
    context.lineTo(canvasWidth, canvasHeight);
    context.strokeStyle = "#ccc";
    context.stroke();
    return context.fillStyle = "#000";
  };

}).call(this);
