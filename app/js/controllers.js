// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  angular.module('myApp.controllers', []).controller('NavCtrl', function($scope, Tables, Place, Data, $http) {
    var cellSize;
    $scope.place = Place;
    $scope.data = Data;
    cellSize = 25;
    $scope.getTables = function(table) {
      return $http({
        url: '/table',
        method: "GET",
        params: {
          place_id: Place.data.id
        }
      }).success(function(tables, status, headers, config) {
        var k, s, v;
        console.log(tables);
        for (k in tables) {
          v = tables[k];
          s = tables[k];
          s.style = {
            position: 'absolute',
            top: "" + (s.row * cellSize) + "px",
            left: "" + (s.column * cellSize) + "px",
            width: "" + (s.width * cellSize) + "px",
            height: "" + (s.height * cellSize) + "px",
            "line-height": "" + (s.height * cellSize) + "px"
          };
        }
        Tables.data = tables;
        return Tables.put(tables);
      });
    };
    return $scope.savePlace = function(place) {
      Place.data = place;
      return Place.put(place);
    };
  }).controller('MainCtrl', function($scope, Tables, Place, Data, $http) {
    $scope.place = Place;
    $scope.tables = Tables;
    $scope.message = "";
    $scope.data = Data;
    $scope.locate = function() {
      if (!autocomplete.bounds) {
        return navigator.geolocation.getCurrentPosition(function(position) {
          var bounds, loc;
          loc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          bounds = new google.maps.LatLngBounds(loc, loc);
          return autocomplete.setBounds(bounds);
        }, function() {
          return alert('error');
        });
      } else {
        return autocomplete.setBounds(null);
      }
    };
    $scope.selectTable = function(table) {
      return $scope.table = table;
    };
    $scope.saveTableQty = function(table) {
      Tables.data[table.name] = table;
      return Tables.put(Tables.data);
    };
    $scope.addTable = function(table) {
      console.log(table);
      Tables.data[table.name] = table;
      return Tables.put(Tables.data);
    };
    $scope.deleteTable = function(table) {
      delete Tables.data[table.name];
      return Tables.put(Tables.data);
    };
    $scope.saveTablePosition = function(name, row, column) {
      var new_name, old_table, table;
      old_table = Tables.data[name];
      table = old_table;
      new_name = "" + row + "-" + column;
      table.row = row;
      table.column = column;
      table.name = new_name;
      Tables.data[new_name] = table;
      delete Tables.data[name];
      $scope.table = table;
      Tables.put(Tables.data);
      return table;
    };
    $scope.saveTableSize = function(name, w, h) {
      var table;
      table = Tables.data[name];
      table.width = w;
      table.height = h;
      $scope.table = table;
      return Tables.put(Tables.data);
    };
    $scope.saveShape = function(table, shape) {
      if (table) {
        table["class"] = shape;
        Tables.data[table.name] = table;
        return Tables.put(Tables);
      }
    };
    return $scope.saveTablesToDb = function() {
      var arr;
      Tables.put(Tables.data);
      console.log(Tables);
      if (!_.isEmpty(Place.data)) {
        arr = {};
        arr['place'] = {
          'id': Place.data.id,
          'name': Place.data.name
        };
        arr['tables'] = Tables.data;
        console.log(arr);
        return $.post('/table', angular.toJson(arr), function(data) {
          $scope.message = "" + (_.size(Tables.data)) + " tables saved";
          $scope.messageStyle = "alert alert-success";
          return $scope.$apply();
        });
      } else {
        $scope.message = "A place not selected";
        return $scope.messageStyle = "alert alert-danger";
      }
    };
  });

}).call(this);
